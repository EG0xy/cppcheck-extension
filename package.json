{
  "name": "cppcheck",
  "displayName": "cppcheck",
  "description": "Invokes the 'cppcheck' static C++ code analyzer.",
  "version": "0.0.1",
  "author": "Matthew Ferreira",
  "publisher": "matthewferreira",
  "license": "MIT",
  "repository": {},
  "engines": {
    "vscode": "^1.5.0"
  },
  "categories": [
    "Linters"
  ],
  "activationEvents": [
    "onLanguage:cpp",
    "*"
  ],
  "main": "./src/extension",
  "contributes": {
    "commands": [
      {
        "command": "cppcheck.runAnalysis",
        "title": "Analyze current file",
        "category": "Cppcheck"
      },
      {
        "command": "cppcheck.runAnalysisAllFiles",
        "title": "Analyze workspace",
        "category": "Cppcheck"
      },
      {
        "command": "cppcheck.showCommands",
        "title": "Show commands",
        "category": "Cppcheck"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "cppcheck",
      "properties": {
        "cppcheck.enable": {
          "type": "boolean",
          "default": false,
          "description": "Controls whether cppcheck is enabled for C++ files."
        },
        "cppcheck.cppcheckPath": {
          "type": "string",
          "default": null,
          "description": "The path to the cppcheck executable. If not set, the default location will be used."
        },
        "cppcheck.includePaths": {
          "type": "array",
          "default": [],
          "description": "Paths to search for include files. They may be relative or absolute."
        },
        "cppcheck.platform": {
          "type": "string",
          "enum": [
            "unix32",
            "unix64",
            "win32A",
            "win32W",
            "win64",
            "native"
          ],
          "default": "native",
          "description": "The platform used for types and sizes."
        },
        "cppcheck.standard": {
          "type": "array",
          "default": [
            "c11",
            "c++11"
          ],
          "description": "The language standards to check against. Can be one or more of: posix, c89, c99, c11, c++03, c++11."
        },
        "cppcheck.define": {
          "type": "array",
          "default": [],
          "description": "Preprocessor symbols to define."
        },
        "cppcheck.undefine": {
          "type": "array",
          "default": [],
          "description": "Preprocessor symbols to undefine."
        },
        "cppcheck.suppressions": {
          "type": "array",
          "default": [],
          "description": "Warnings to suppress. Refer to the 'cppcheck' documentation for what to supply here."
        },
        "cppcheck.verbose": {
          "type": "boolean",
          "default": false,
          "description": "Whether to enable verbose output from 'cppcheck'."
        }
      }
    }
  },
  "scripts": {
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "node ./node_modules/vscode/bin/test"
  },
  "devDependencies": {
    "typescript": "^2.0.3",
    "child_process": "^1.0.2",
    "eslint": "^3.6.0",
    "fs": "0.0.1-security",
    "mocha": "^2.3.3",
    "vscode": "^1.0.0",
    "@types/node": "^6.0.40",
    "@types/mocha": "^2.2.32"
  }
}
